import asyncio
import datetime
import json
import os
import sys
from hashlib import md5
from itertools import islice

import aiohttp
from dotenv import load_dotenv

load_dotenv("credentials.env")

API_KEY = os.environ["LASTFM_API_KEY"]
API_SECRET = os.environ["LASTFM_API_SECRET"]
USERNAME = os.environ["LASTFM_USERNAME"]
PASSWORD = os.environ["LASTFM_PASSWORD"]


async def lastfm_login():
    data = await lastfm_request(
        {
            "method": "auth.getMobileSession",
            "username": USERNAME,
            "password": PASSWORD,
        }
    )
    try:
        session = data["session"]["key"]
        print("Logged in as", data["session"]["name"])
        return session
    except KeyError:
        print("Could not get session")
        print(data)


def sign_call(params):
    signature = ""
    for p in sorted(params):
        signature += p
        signature += params[p]
    signature += API_SECRET
    signature = md5(signature.encode("utf-8")).hexdigest()
    return signature


async def scrobble(session_key, track_data, timestamp: datetime.datetime):
    session = aiohttp.ClientSession()
    for chunk_n, tracks in enumerate(chunk(track_data, 50)):
        params = {"sk": session_key, "method": "track.scrobble"}
        for i, track in enumerate(tracks):
            params[f"artist[{i}]"] = track["artist"]
            params[f"track[{i}]"] = track["track"]
            params[f"album[{i}]"] = track["album"]
            params[f"timestamp[{i}]"] = str(
                int(timestamp.timestamp()) + chunk_n * 50 * 60 + 60 * i
            )

        data = await lastfm_request(params, session)
        print("Scrobbling chunk", chunk_n)
        try:
            print(data["scrobbles"]["@attr"])
            for scrobble in data["scrobbles"]["scrobble"]:
                ignored = scrobble["ignoredMessage"]
                if ignored["code"] != "0":
                    print(scrobble["artist"]["#text"], "-", scrobble["track"]["#text"], ignored)
        except KeyError as e:
            print(e)
            print(data)

    # close opened session
    await session.close()


def chunk(it, size):
    it = iter(it)
    return iter(lambda: tuple(islice(it, size)), ())


async def lastfm_request(params: dict, session: aiohttp.ClientSession):

    base_url = "https://ws.audioscrobbler.com/2.0"
    params.update({"api_key": API_KEY})
    params.update(
        {
            "api_sig": sign_call(params),
            "format": "json",
        }
    )

    async with session.post(url=base_url, params=params) as response:
        data = await response.json()

    # print(data)
    return data


async def main(filename):
    session_key = await lastfm_login()
    with open(filename, "r", encoding="utf-8") as f:
        data = json.load(f)
        timestamp = datetime.datetime.now() - datetime.timedelta(13)
        print(f"Starting to scrobble {len(data)} tracks with timestamp set to {timestamp} ...")
        if "-v" in sys.argv:
            for track in data:
                print(
                    "--->",
                    datetime.datetime.fromtimestamp(track["timestamp"]),
                    track["artist"],
                    "-",
                    track["track"],
                )
        await scrobble(session_key, data, timestamp)


if __name__ == "__main__":
    if len(sys.argv) < 2 or sys.argv[1] in ["-h", "--help"]:
        print("Scrobble a converted json file generated by convert.py")
        print()
        print("Usage:")
        print("\tpython scrobble.py [path/to/json] [-v]")
        quit(1)
    asyncio.run(main(sys.argv[1]))
